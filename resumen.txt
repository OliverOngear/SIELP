Toma como bas los lenguajes:C, c++, Java, python, rust, javascript, kotlin

Sistema Integral de Evaluación para Lenguajes de Programación (SIELP): Es una herramienta que se utiliza para medir y describir los conocimientos que poseen las personas en un lenguaje de programación. Se estructura en torno a seis niveles de conocimiento: S1, S2, I1, I2, E1 y E2, que se agrupan en tres bloques: conocimiento básico (Short) consta de los niveles S1 y S2, conocimiento intermedio (Intermediate) consta de los niveles I1 y I2, y conocimiento avanzado (Extended) consta de los niveles E1 y E2. Estos niveles permiten evaluar y describir el conocimiento que poseen las personas, evaluando los conocimientos en términos de Sintaxis, Manejo de Datos, Uso de Operaciones, Uso de Estructuras, Manejo de Errores, Documentación del Código y Uso de Consultas de Referencias.

Esta es la descripción general de cada uno de los niveles:

S1: Una persona con este nivel es capaz de realizar programas que incluyen operaciones aritméticas simples y mensajes por consola, además de usar estructuras de control de flujo básicas.

S2: Una persona con este nivel es capaz de realizar programas que permiten la interacción entre diferentes tipos de datos, el uso de entradas y salidas, además es capaz de usar algoritmos simples en su programa siempre que tenga acceso a material de consulta.

I1: Una persona con este nivel es capaz de crear programas que cuenten con múltiples funcionalidades, además de que es capaz de hacer uso de funciones, objetos y librerías.

I2: Una persona con este nivel es capaz de crear programas complejos o librerías con múltiples funcionalidades, que sean accesibles, adaptables y fáciles de usar para otros programadores.

E1: Una persona con este nivel es capaz de crear programas complejos con buen nivel de modularidad y multi-funcionalidad, que además de estar bien implementados hacen un buen uso de la memoria y la velocidad de ejecución.

E2: Una persona con este nivel es capaz de crear programas complejos con buen nivel de modularidad y multi-funcionalidad sin problema, además crear solucones que busquen la optimizacion del uso de la memoria y la velocidad de ejecución.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

S1: Entiende, reconoce y diferencia un conjunto limitado y de uso común de palabras reservadas dentro del lenguaje de programación.
S2: Entiende, reconoce y diferencia un conjunto básico y común de palabras reservadas dentro del lenguaje de programación.
I1: Posee un cocimiento extenso de la sintaxis del lenguaje ademas de que es capaz de reconocerlo y diferenciar la sintaxis de este de la sintaxis de otros lenguajes de programación.
I2: Lee, comprende e identifica patrones básicos de diseño, nomenclatura, estilo de código, regularización, el uso de códigos re-utilizables en su propio código o en el de alguien mas.
E1: Lee, comprende e identifica patrones de diseño, nomenclatura, estilo de código, regularización, el uso de códigos re-utilizables en su propio código o en el de alguien mas, ademas de encontrar soluciones y mejoras a estos sin problema.
E2: Lee, comprende e identifica patrones de diseño, nomenclatura, estilo de código, regularización, el uso de códigos re-utilizables en su propio código o en el de alguien mas, ademas de encontrar soluciones y mejoras a estos sin problema.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

esta es la descripcion de conocimientos en sintaxis que debe tener una perosna de nivel S1: Entiende, reconoce un conjunto pequeño de palabras reservadas de JavaScript [let, var, if, else, while, do, switch, for, case, break, etc.]

esta es la descripcion de conocimientos en sintaxis que debe tener una perosna de nivel S2: Entiende y reconoce un conjunto amplio de palabras reservadas dentro del lenguaje de programación [const, function, return, try, catch, finally, throw, typeof, new, delete, this, in, void, class, with]

